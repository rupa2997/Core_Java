java end of file===
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {


    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int count=0;
        while(sc.hasNext()){
             count++;
              String s=sc.nextLine();
             System.out.println(count+" "+s);
            
        }
    }
}

if-else==============================
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {



    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int N = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        if(N%2!=0){
            System.out.println("Weird");
        }else if(N%2==0 && N>=2 && N<=5){
            System.out.println("Not Weird");
        }else if(N%2==0 && N>=6 && N<=20){
            System.out.println("Weird");
        }else if(N%2==0 && N>20){
            System.out.println("Not Weird");
        }
        scanner.close();
    }
}

==int doublr string===============================
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int i = scan.nextInt();
        double d=scan.nextDouble();
        scan.nextLine();
        String s=scan.nextLine();
        

        System.out.println("String: " + s);
        System.out.println("Double: " + d);
        System.out.println("Int: " + i);
    }
}

java output formatting================================
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
            Scanner sc=new Scanner(System.in);
            System.out.println("================================");
            for(int i=0;i<3;i++)
            {
                String s1=sc.next();
                int x=sc.nextInt();
                System.out.printf("%-15s",s1);
                System.out.printf("%03d%n",x);
            }
            System.out.println("================================");

    }
}

Java Loops=================================
import java.util.*;
import java.io.*;

class Solution{
    public static void main(String []argh){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int sum=0;
        for(int i=0;i<n;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();
            int n1=sc.nextInt();
            sum=a;
            for(int j=0;j<n1;j++){
              sum+=Math.pow(2,j)*b;
              System.out.printf(sum+" ");
            }
            sum=0;
            System.out.println();
        }
        sc.close();
        
    }
}

Java Datatypes=====================================
import java.util.*;
import java.io.*;



class Solution{
    public static void main(String []argh)
    {



        Scanner sc = new Scanner(System.in);
        int t=sc.nextInt();

        for(int i=0;i<t;i++)
        {

            try
            {
                long x=sc.nextLong();
                System.out.println(x+" can be fitted in:");
                if(x>=-128 && x<=127)System.out.println("* byte");
                if(x>=-32768 && x<=32767)System.out.println("* short");
                if(x>=-2147483648 && x<=2147483647)System.out.println("* int");
                if(x>=Long.MIN_VALUE &&
                        x<=Long.MAX_VALUE)System.out.println("* long");
                //Complete the code
            }
            catch(Exception e)
            {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }

        }
    }
}

Static initializer block======================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int B;
    static int H;
    static boolean flag=true;
    static{
        Scanner sc = new Scanner(System.in);
        B = sc.nextInt();
        H = sc.nextInt();
            if(B<=0 || H<=0){
        System.out.print("java.lang.Exception: Breadth and height must be positive");
        flag=false;
    }}

public static void main(String[] args){
		if(flag){
			int area=B*H;
			System.out.print(area);
		}
		
	}//end of main

}//end of class


Substring==================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String S = in.next();
        int start = in.nextInt();
        int end = in.nextInt();
        System.out.println(S.substring(start,end));
    }
}


int to string to int conversion=========
import java.util.*;
import java.security.*;
public class Solution {
 public static void main(String[] args) {

  DoNotTerminate.forbidExit();

  try {
   Scanner in = new Scanner(System.in);
   int n = in .nextInt();
   in.close();
   //String s=???; Complete this line below

   String s=Integer.toString(n);

   
   if (n == Integer.parseInt(s)) {
    System.out.println("Good job");
   } else {
    System.out.println("Wrong answer.");
   }
  } catch (DoNotTerminate.ExitTrappedException e) {
   System.out.println("Unsuccessful Termination!!");
  }
 }
}

//The following class will prevent you from terminating the code using exit(0)!
class DoNotTerminate {

 public static class ExitTrappedException extends SecurityException {

  private static final long serialVersionUID = 1;
 }

 public static void forbidExit() {
  final SecurityManager securityManager = new SecurityManager() {
   @Override
   public void checkPermission(Permission permission) {
    if (permission.getName().contains("exitVM")) {
     throw new ExitTrappedException();
    }
   }
  };
  System.setSecurityManager(securityManager);
 }
}

Date And time===
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'findDay' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. INTEGER month
     *  2. INTEGER day
     *  3. INTEGER year
     */

    public static String findDay(int month, int day, int year) {
        Calendar cal = Calendar.getInstance();



        cal.set(Calendar.MONTH, month-1);


        cal.set(Calendar.DAY_OF_MONTH, day);


        cal.set(Calendar.YEAR, year);



        String[] day_of_week = {"SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY","SATURDAY"};


        


        return day_of_week[cal.get(Calendar.DAY_OF_WEEK)-1];


    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int month = Integer.parseInt(firstMultipleInput[0]);

        int day = Integer.parseInt(firstMultipleInput[1]);

        int year = Integer.parseInt(firstMultipleInput[2]);

        String res = Result.findDay(month, day, year);

        bufferedWriter.write(res);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

Currency Formatter===========================
import java.util.*;
import java.text.*;

public class Solution {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double payment = scanner.nextDouble();
        scanner.close();
        
        // Write your code here.
        NumberFormat usFormat = NumberFormat.getCurrencyInstance(Locale.US);
        NumberFormat cnFormat = NumberFormat.getCurrencyInstance(Locale.CHINA);
        NumberFormat frFormat = NumberFormat.getCurrencyInstance(Locale.FRANCE);
        NumberFormat inFormat = NumberFormat.getCurrencyInstance(new Locale("en", "in"));

        String us = usFormat.format(payment);
        String india = inFormat.format(payment);
        String france = frFormat.format(payment);
        String china = cnFormat.format(payment);
        
        
        System.out.println("US: " + us);
        System.out.println("India: " + india);
        System.out.println("China: " + china);
        System.out.println("France: " + france);
    }
}






=====================================================
=========Strings========================================
======================================================
Java String tokents====
import java.io.*;
import java.util.*;
import java.util.regex.*; 
public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        scan.close();
        if (s.trim().isEmpty()) {
			System.out.println(0);
        }
        else{
        String[] splitString = (s.replaceAll("^\\W+", "").split("[\\s!,?._'@]+"));
        System.out.println(splitString.length);
        for (String string : splitString) {
        	System.out.println(string);
        }
        }
    }
}
Java Substring==============================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
         int n=(A.length()+B.length());
         System.out.println(n);
         if(A.compareTo(B)>0){
             System.out.println("Yes");
         }else{
             System.out.println("No");
         }
         String s=A.substring(0,1).toUpperCase()+A.substring(1);
          String s1=B.substring(0,1).toUpperCase()+B.substring(1);
          System.out.println(s+" "+s1);
        
    }
}

String Equals===============================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String result="Yes";
        int n=A.length();
        for(int i=0;i<n/2;i++){
            if((A.substring(i,i+1).equals(A.substring(n-i-1,n-i)))){
              
            }else{
                result="No";
            }
        }
        System.out.print(result);
       
    }
}

===============String length,comparison,uppercase 1st letter==
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
         int n=(A.length()+B.length());
         System.out.println(n);
         if(A.compareTo(B)>0){
             System.out.println("Yes");
         }else{
             System.out.println("No");
         }
         String s=A.substring(0,1).toUpperCase()+A.substring(1);
          String s1=B.substring(0,1).toUpperCase()+B.substring(1);
          System.out.println(s+" "+s1);
        
    }
}


Substring comparison=============================
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String smallest = "";
        String largest = "";
        String substr="";
        smallest=largest=s.substring(0,k);
        for(int i=1;i<s.length()-k+1;i++){
            substr=s.substring(i,k+i);
            if((smallest.compareTo(substr))>0){
                smallest=substr;
            }
             if((largest.compareTo(substr))<0){
                 largest=substr;
             }
        }
        
        
        return smallest + "\n" + largest;
    }

java String reverse========================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String result="Yes";
        int n=A.length();
        for(int i=0;i<n/2;i++){
            if((A.substring(i,i+1).equals(A.substring(n-i-1,n-i)))){
              
            }else{
                result="No";
            }
        }
        System.out.print(result);
       
    }
}

Anagram==========================
import java.util.Scanner;

public class Solution {

    static boolean isAnagram(String a, String b) {
        char a1[]=a.toLowerCase().toCharArray();
         char b1[]=b.toLowerCase().toCharArray();
         if(a.length()!=b.length()){
             return false;
         }else{
             java.util.Arrays.sort(a1);
             java.util.Arrays.sort(b1);
           for(int i=0;i<a.length();i++){
               if(a1[i]!=b1[i]){
                   return false;
               }
           }
           return true;
         }
    }

  public static void main(String[] args) {
    
        Scanner scan = new Scanner(System.in);
        String a = scan.next();
        String b = scan.next();
        scan.close();
        boolean ret = isAnagram(a, b);
        System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}

Regular Expression checker===============
import java.lang.*;
import java.util.Scanner;

class UsernameValidator{
public static final String regularExpression="[a-zA-Z][a-zA-Z0-9_]{7,29}$";
}

public class Solution{
        private static final Scanner scan=new Scanner(System.in);
        public static void main(String[] args){
             int n=Integer.parseInt(scan.nextLine());
             while(n-- !=0 && n<=100 ){
               String userName =scan.nextLine();
               if(userName.matches(UsernameValidator.regularExpression)){
    //No Flags Used
                  System.out.println("Valid");
               } else {
                       System.out.println("Invalid");
                   }
             }
        }
}

Pattern Syntax Checkre=================
import java.util.Scanner;
import java.util.regex.*;

public class PatternSyntaxChecker
{
   public static void main(String[] args){
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());
      while(testCases>0){
         testCase--;
         String pattern = in.nextLine();
             //Write your code
         try{
            Pattern.compile(pattern);
            System.out.println("Valid");
         }catch(PatternSyntaxException e){
            System.out.println("Invalid");
         }
         
          
      }
   }
}
=========================================================
=============DataStructure======================================
Java 1D Array==========================================
import java.util.*;

public class Solution {

    public static void main(String[] args) {
	   
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int a[]=new int[n];
        for(int j=0;j<a.length;j++){
            a[j]=scan.nextInt();
        }
        scan.close();

        // Prints each sequential element in array a
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }
}

java SubArray==========================================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       int n=sc.nextInt();
       int count=0;
       int sum=0;
       int a[]=new int[n];
       for(int i=0;i<n;i++){
           a[i]=sc.nextInt();
       }
       for(int i=0;i<n;i++){
           sum=0;
           for(int j=i;j<n;j++){
             sum+=a[j];
             if(sum<0)
             {
                 count++;
             }
           }
       }
       System.out.println(count);
    }
}

Java ArrayList============================================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        ArrayList<ArrayList<Integer>> aa=new ArrayList<>();
        for(int i=0;i<n;i++){
            int n1=sc.nextInt();
            ArrayList aa1=new ArrayList();
            for(int j=0;j<n1;j++){
                   aa1.add(sc.nextInt());
            }
            aa.add(aa1);
        }
        int n2=sc.nextInt();
        for(int k=0;k<n2;k++){
            int x=sc.nextInt();
            int y=sc.nextInt();
            try{
                System.out.println(aa.get(x-1).get(y-1));
            }catch(IndexOutOfBoundsException e){
                 System.out.println("ERROR!");
            }
        }
    }
}

JavaList==============================================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        ArrayList<Integer> aa=new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
            aa.add(sc.nextInt());
        }
        int n1=sc.nextInt();
        sc.nextLine();
        
        for(int j=0;j<n1;j++){
         String s=sc.nextLine();
         if(s.equals("Insert")){
             String a[]=sc.nextLine().split(" ");
             aa.add(Integer.parseInt(a[0]),Integer.parseInt(a[1]));
         }else if(s.equals("Delete")){
             int ss=Integer.parseInt(sc.nextLine());
            aa.remove(ss);
         }
        }
        for(Integer a1:aa){
             System.out.print(a1+" ");
        }
    }
}

Java map====================================
//Complete this code or write your own from scratch
import java.util.*;
import java.io.*;

class Solution{
	public static void main(String []argh)
	{
		Scanner in = new Scanner(System.in);
        List ll=new ArrayList();
		int n=in.nextInt();
		in.nextLine();
		for(int i=0;i<n;i++)
		{
			String name=in.nextLine();
			int phone=in.nextInt();
			in.nextLine();
            aa.add(name,phone);
		}

		while(in.hasNext())
		{
			String s=in.nextLine();
		}
	}
}


Java Stack========================================
import java.util.*;
class Solution{
    
    public static void main(String []args)
    {
        Scanner sc = new Scanner(System.in);
        
        while (sc.hasNext()) {
            String input=sc.next();
            Stack s = new Stack();
            for(int i=0;i<input.length();i++){
                Character c = new Character(input.charAt(i));
                if(c == '{' || c == '[' || c == '(')
                    s.push(c);
                else if((c == '}' || c == ']' || c == ')') && s.size() == 0){
                    s.push(c);
                    break;
                }
                else if((c == '}' && (Character)s.peek() == '{') || (c == ']' && (Character)s.peek() == '[') || (c == ')' && (Character)s.peek() == '('))
                    s.pop();
                else 
                    break;
            }
            if(s.empty())
                System.out.println("true");
            else
                System.out.println("false");     
        }
        
    }
}

HashSet==============================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

 public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        String [] pair_left = new String[t];
        String [] pair_right = new String[t];
        
        for (int i = 0; i < t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }
         HashSet<String> pairs=new HashSet<String>(t);
       for(int j=0;j<t;j++){
          pairs.add("("+pair_left[j]+", "+pair_right[j]+")");
          System.out.println(pairs.size());
       }

   }
}

Java comparator========================================
import java.util.*;

// Write your Checker class 
class Checker implements Comparator<Player>{
    public int compare(Player a,Player b){
        int a1=a.score;
        int b1=b.score;
        String n1=a.name;
        String n2=b.name;
        if(a1<b1){
            return 1;
        }else if(a1 > b1){
            return -1;
        }
        else{
            return n1.compareTo(n2);
        }

    }
}

class Player{
    String name;
    int score;
    
    Player(String name, int score){
        this.name = name;
        this.score = score;
    }
}

class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();

        Player[] player = new Player[n];
        Checker checker = new Checker();
        
        for(int i = 0; i < n; i++){
            player[i] = new Player(scan.next(), scan.nextInt());
        }
        scan.close();

        Arrays.sort(player, checker);
        for(int i = 0; i < player.length; i++){
            System.out.printf("%s %s\n", player[i].name, player[i].score);
        }
    }
}

Java Sort=========================================
import java.util.*;

class Student{
	private int id;
	private String fname;
	private double cgpa;
	public Student(int id, String fname, double cgpa) {
		super();
		this.id = id;
		this.fname = fname;
		this.cgpa = cgpa;
	}
	public int getId() {
		return id;
	}
	public String getFname() {
		return fname;
	}
	public double getCgpa() {
		return cgpa;
	}
}
class myComparator implements Comparator<Student>{
 /* public int compare(Student s1,Student s2){
     
     if(s1.getCgpa() < s2.getCgpa()){
         return 1;
     }else if(s1.getCgpa() > s2.getCgpa()){
         return -1;
     }else if(s1.getFname().compareTo(s2.getFname())== -1){
         return -1;
     }else if(s1.getFname().compareTo(s2.getFname())== 1){
         return 1;
     }else if(s1.getId() < s1.getId()){
         return 1;
     }else {
         return -1;
     }
  }*/
  public int compare(Student s1, Student s2) {

   int compare = s1.getFname().compareTo(s2.getFname());

   if((s1.getCgpa() < s2.getCgpa()) && (s1.getCgpa() != s2.getCgpa())){

       return 1;

   }else if((s1.getCgpa() > s2.getCgpa()) && (s1.getCgpa() != s2.getCgpa())){

       return -1;

   }

   else if((s1.getCgpa() == s2.getCgpa()) && (compare < 0))

       {

       return -1;

   }

   else if((s1.getCgpa() == s2.getCgpa()) && (compare > 0))

       {

       return 1;

   }

   else if((s1.getCgpa() == s2.getCgpa()) && compare == 0 && (s1.getId() < s2.getId()))

   {

       return 1;

   }

   else

       {

       return -1;

   }

  }
}
//Complete the code
public class Solution
{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		
		ArrayList<Student> studentList = new ArrayList<Student>();
		while(testCases>0){
			int id = in.nextInt();
			String fname = in.next();
			double cgpa = in.nextDouble();
			
			Student st = new Student(id, fname, cgpa);
			studentList.add(st);
			
			testCases--;
		}
      Collections.sort(studentList, new myComparator());
      	for(Student st: studentList){
			System.out.println(st.getFname());
		}
	}
}
======================================================
============OOPS=====================================
======================================================
Java Method Overiding =====
import java.util.*;
class Sports{

    String getName(){
        return "Generic Sports";
    }
  
    void getNumberOfTeamMembers(){
        System.out.println( "Each team has n players in " + getName() );
    }
}

class Soccer extends Sports{
    @Override
    String getName(){
        return "Soccer Class";
    }

    void getNumberOfTeamMembers(){
        System.out.println( "Each team has 11 players in " + getName() );
    }

}

public class Solution{
	
    public static void main(String []args){
        Sports c1 = new Sports();
        Soccer c2 = new Soccer();
        System.out.println(c1.getName());
        c1.getNumberOfTeamMembers();
        System.out.println(c2.getName());
        c2.getNumberOfTeamMembers();
	}
}



Java Method Overiding 2=====
import java.util.*;
import java.io.*;


class BiCycle{
	String define_me(){
		return "a vehicle with pedals.";
	}
}

class MotorCycle extends BiCycle{
	String define_me(){
		return "a cycle with an engine.";
	}
	
	MotorCycle(){
		System.out.println("Hello I am a motorcycle, I am "+ define_me());

		 String temp=super.define_me();//Fix this line

		System.out.println("My ancestor is a cycle who is "+ temp );
	}
	
}
class Solution{
	public static void main(String []args){
		MotorCycle M=new MotorCycle();
	}
}

Java Instanceof keyword=========
import java.util.*;


class Student{}
class Rockstar{   }
class Hacker{}


public class InstanceOFTutorial{
	
   static String count(ArrayList mylist){
      int a = 0,b = 0,c = 0;
      for(int i = 0; i < mylist.size(); i++){
         Object element=mylist.get(i);
         if(element instanceof Student)
            a++;
         if(element instanceof Rockstar)
            b++;
         if(element instanceof Hacker)
            c++;
      }
      String ret = Integer.toString(a)+" "+ Integer.toString(b)+" "+ Integer.toString(c);
      return ret;
   }

   public static void main(String []args){
      ArrayList mylist = new ArrayList();
      Scanner sc = new Scanner(System.in);
      int t = sc.nextInt();
      for(int i=0; i<t; i++){
         String s=sc.next();
         if(s.equals("Student"))mylist.add(new Student());
         if(s.equals("Rockstar"))mylist.add(new Rockstar());
         if(s.equals("Hacker"))mylist.add(new Hacker());
      }
      System.out.println(count(mylist));
   }
}

instanceofstring======

import java.util.*;
public class Main{
	
   static Iterator func(ArrayList mylist){
      Iterator it=mylist.iterator();
      while(it.hasNext()){
         Object element = it.next();
         if(element instanceof String)//Hints: use instanceof operator

			break;
		}
      return it;
      
   }
   @SuppressWarnings({ "unchecked" })
   public static void main(String []args){
      ArrayList mylist = new ArrayList();
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int m = sc.nextInt();
      for(int i = 0;i<n;i++){
         mylist.add(sc.nextInt());
      }
      
      mylist.add("###");
      for(int i=0;i<m;i++){
         mylist.add(sc.next());
      }
      
      Iterator it=func(mylist);
      while(it.hasNext()){
         Object element = it.next();
         System.out.println((String)element);
      }
   }
}

java inheritance 1====
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Animal{
	void walk()
	{
		System.out.println("I am walking");
	}
}
class Bird extends Animal
{
	void fly()
	{
		System.out.println("I am flying");
	}
    void sing()
    {
        System.out.println("I am singing");
    }
    
}


public class Solution{

   public static void main(String args[]){

	  Bird bird = new Bird();
	  bird.walk();
	  bird.fly();
      bird.sing();
	
   }
}

Java Inheritance 2====
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Arithmetic{
    int add(int a,int b){
        return a+b;
    }
}
class Adder extends Arithmetic{

}

public class Solution{
    public static void main(String []args){
        // Create a new Adder object
        Adder a = new Adder();
        
        // Print the name of the superclass on a new line
        System.out.println("My superclass is: " + a.getClass().getSuperclass().getName());	
        
        // Print the result of 3 calls to Adder's `add(int,int)` method as 3 space-separated integers:
        System.out.print(a.add(10,32) + " " + a.add(10,3) + " " + a.add(10,10) + "\n");
     }
}

Java Abstract class===================================
import java.util.*;
abstract class Book{
	String title;
	abstract void setTitle(String s);
	String getTitle(){
		return title;
	}
	
}

class MyBook extends Book{
    void setTitle(String s){
        this.title=s;
    }
}

public class Main{
	
	public static void main(String []args){
		//Book new_novel=new Book(); This line prHMain.java:25: error: Book is abstract; cannot be instantiated
		Scanner sc=new Scanner(System.in);
		String title=sc.nextLine();
		MyBook new_novel=new MyBook();
		new_novel.setTitle(title);
		System.out.println("The title is: "+new_novel.getTitle());
      	sc.close();
		
	}
}

Java Interface=========================================
import java.util.*;
interface AdvancedArithmetic{
  int divisor_sum(int n);
}
class MyCalculator implements AdvancedArithmetic{
    
    public int divisor_sum(int n){
        int i=1;
        int sum=0;
    while(i<=n)
    {
        if(n%i==0){
        sum+=i;

        }
        i++;
    }
    return sum;
    }
}


class Solution{
    public static void main(String []args){
        MyCalculator my_calculator = new MyCalculator();
        System.out.print("I implemented: ");
        ImplementedInterfaceNames(my_calculator);
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.print(my_calculator.divisor_sum(n) + "\n");
      	sc.close();
    }
    /*
     *  ImplementedInterfaceNames method takes an object and prints the name of the interfaces it implemented
     */
    static void ImplementedInterfaceNames(Object o){
        Class[] theInterfaces = o.getClass().getInterfaces();
        for (int i = 0; i < theInterfaces.length; i++){
            String interfaceName = theInterfaces[i].getName();
            System.out.println(interfaceName);
        }
    }
}

iterator=============================================
import java.util.*;
public class Main{
	
   static Iterator func(ArrayList mylist){
      Iterator it=mylist.iterator();
      while(it.hasNext()){
         Object element = it.next();
         if(element instanceof String)//Hints: use instanceof operator

			break;
		}
      return it;
      
   }
   @SuppressWarnings({ "unchecked" })
   public static void main(String []args){
      ArrayList mylist = new ArrayList();
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int m = sc.nextInt();
      for(int i = 0;i<n;i++){
         mylist.add(sc.nextInt());
      }
      
      mylist.add("###");
      for(int i=0;i<m;i++){
         mylist.add(sc.next());
      }
      
      Iterator it=func(mylist);
      while(it.hasNext()){
         Object element = it.next();
         System.out.println((String)element);
      }
   }
}

===============String length,comparison,uppercase 1st letter=======================
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
         int n=(A.length()+B.length());
         System.out.println(n);
         if(A.compareTo(B)>0){
             System.out.println("Yes");
         }else{
             System.out.println("No");
         }
         String s=A.substring(0,1).toUpperCase()+A.substring(1);
          String s1=B.substring(0,1).toUpperCase()+B.substring(1);
          System.out.println(s+" "+s1);
        
    }
}


Substring comparison=============================
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String smallest = "";
        String largest = "";
        String substr="";
        smallest=largest=s.substring(0,k);
        for(int i=1;i<s.length()-k+1;i++){
            substr=s.substring(i,k+i);
            if((smallest.compareTo(substr))>0){
                smallest=substr;
            }
             if((largest.compareTo(substr))<0){
                 largest=substr;
             }
        }
        
        
        return smallest + "\n" + largest;
    }

java String reverse====
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String result="Yes";
        int n=A.length();
        for(int i=0;i<n/2;i++){
            if((A.substring(i,i+1).equals(A.substring(n-i-1,n-i)))){
              
            }else{
                result="No";
            }
        }
        System.out.print(result);
       
    }
}

Anagram=======
import java.util.Scanner;

public class Solution {

    static boolean isAnagram(String a, String b) {
        char a1[]=a.toLowerCase().toCharArray();
         char b1[]=b.toLowerCase().toCharArray();
         if(a.length()!=b.length()){
             return false;
         }else{
             java.util.Arrays.sort(a1);
             java.util.Arrays.sort(b1);
           for(int i=0;i<a.length();i++){
               if(a1[i]!=b1[i]){
                   return false;
               }
           }
           return true;
         }
    }

  public static void main(String[] args) {
    
        Scanner scan = new Scanner(System.in);
        String a = scan.next();
        String b = scan.next();
        scan.close();
        boolean ret = isAnagram(a, b);
        System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}
========================================================
============Exception==========================================================================================
try-catch=====
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
       
        try{
             int a=sc.nextInt();
            int b=sc.nextInt();
            int c=a/b;
            System.out.println(c);
        }catch(InputMismatchException e){
           System.out.println("java.util.InputMismatchException");
        }catch(Exception e){
            System.out.println(e);
        }
    }
}
========================================================
===========throwsException======================================================
import java.util.Scanner;
class MyCalculator {
    long power(int n,int p)throws Exception{
        if(n<0 || p<0){
            throw new Exception("n or p should not be negative.");
        }else if(n==0 && p==0){
            throw new Exception("n and p should not be zero.");
        }else{
            return (long)Math.pow((long)n,(long)p);
        }
    }
    
}

public class Solution {
    public static final MyCalculator my_calculator = new MyCalculator();
    public static final Scanner in = new Scanner(System.in);
    
    public static void main(String[] args) {
        while (in .hasNextInt()) {
            int n = in .nextInt();
            int p = in .nextInt();
            
            try {
                System.out.println(my_calculator.power(n, p));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
}



Hourglass
Skip to content
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@rupa2997 
Learn Git and GitHub without any code!
Using the Hello World guide, you’ll start a branch, write comments, and open a pull request.


yanz67
/
HackerRank
17
7396
Code
Issues
Pull requests
1
Actions
Projects
Wiki
Security
Insights
HackerRank/Java/Collections/Java2DArray.java /
@yanz67
yanz67 Add Java Domain Solutions
Latest commit 85c6c30 on Dec 11, 2015
 History
 1 contributor
77 lines (60 sloc)  2.01 KB
  
/* Java 2D Array
You are given a 6∗6 2D array. An hourglass in an array is a portion shaped like this:
a b c
  d
e f g
For example, if we create an hourglass using the number 1 within an array full of zeros, it may look like this:
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
Actually there are many hourglasses in the array above. The three leftmost hourglasses are the following:
1 1 1     1 1 0     1 0 0
  1         0         0
1 1 1     1 1 0     1 0 0
The sum of an hourglass is the sum of all the numbers within it. The sum for the hourglasses above are 7, 4, and 2, respectively.
In this problem you have to print the largest sum among all the hourglasses in the array.
Input Format
There will be exactly 6 lines, each containing 6 integers seperated by spaces. Each integer will be between −9 and 9 inclusive.
Output Format
Print the answer to this problem on a single line.
Sample Input
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
Sample Output
19 
*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[][] numArray = new String[6][];
        int largestSum = 0;
        for(int i=0; i<6; i++){
            numArray[i]=sc.nextLine().split(" ");
        }
        
        for(int i=0;i<=3;i++){
            for(int j=0;j<=3;j++){
                int sum = Integer.parseInt(numArray[i][j])+Integer.parseInt(numArray[i][j+1])+Integer.parseInt(numArray[i][j+2])+Integer.parseInt(numArray[i+1][j+1])+Integer.parseInt(numArray[i+2][j])+Integer.parseInt(numArray[i+2][j+1])+Integer.parseInt(numArray[i+2][j+2]);
                if(i==0 && j==0){
                    largestSum=sum;
                }else{
                    if(sum>largestSum){
                        largestSum=sum;
                    }
                }
            }
        }
        System.out.println(largestSum);
    }
}

generics 
import java.lang.reflect.Method;

/* Declare the Printer class, to print generic values */
class Printer {
	/* Declare a generic printArray method of type inputType,
	 * accepting an array of type inputType */
	public <inputType> void printArray(inputType[] array) {
		/* Loop thru the array */
		for (int i = 0; i < array.length; i++) {
			/* Print out each element of the array on a new line */
			System.out.println(array[i]);
		}
	}
}

	/* Declare the solution class */
public class Solution {

	/* Start the program here */
	public static void main(String[] args) {
		/* Create an instance of the Printer class */
		Printer myPrinter = new Printer();
		
		/* Create Integer and String arrays as test data */
		Integer[] intArray = { 1, 2, 3 };
		String[] stringArray = { "Hello", "World" };
		
		/* Print the arrays using the generic function printArray */
		myPrinter.printArray( intArray );
		myPrinter.printArray( stringArray );
		
		/* Test that there is only one generic function handling both
		 * integers and strings.  (An alternative method for doing this
		 * is function overloading, with one function accepting strings,
		 * and the other accepting ints; but this exercise is about
		 * doing a single generic function to handle both
		 */
		
		/* Initialize the printArray method count to 0 */
		int printArrayMethodCount = 0;
		/* Loop thru all the methods for the Printer class */
		for (Method method : Printer.class.getDeclaredMethods()) {
			/* Get the name of the method */
			String methodName = method.getName();
			/* Is this method a printArray method */
			if (methodName.equals("printArray")) {
				/* If so, increment the printArrayMethodCount */
				printArrayMethodCount++;
			}
		}
		/* See if we have more than 1 printArray method */
		if (printArrayMethodCount > 1) {
			/* Print out an error message */
			System.out.println("Method overloading is not allowed!");
			assert printArrayMethodCount == 1;
		}
	}

}


=========
myregex

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner;

class Solution{

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            String IP = in.next();
            System.out.println(IP.matches(new MyRegex().pattern));
        }

    }
}
class MyRegex
{
    String pattern = "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
            
}

=========BigNum
Scanner sc = new Scanner(System.in);
        String numOne = sc.nextLine();
        String numTwo = sc.nextLine();
        BigInteger bigNumOne = new BigInteger(numOne);
        BigInteger bigNumTwo = new BigInteger(numTwo);
        System.out.println(bigNumOne.add(bigNumTwo));
        System.out.println(bigNumOne.multiply(bigNumTwo));
